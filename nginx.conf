worker_processes  1;
user root;  
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    gzip  on;
    rewrite_log on;
    real_ip_header     X-Forwarded-For;
    server {
       listen 80;
       charset utf-8;
       default_type text/html;
       location / {
            root /opt/demoapps/;
            index index.html index.htm index;
            # 不同规则的重写（比如固定的几个），注意last 与break 的区别
            rewrite ^(.*?)(.html)?\/1$ /demo1$1 last;
            rewrite ^(.*?)(.html)?\/2$ /demo2$1 last;
       }
       error_page 404 /404.html;
       # 不存在默认界面
       location = /404.html {
        root /opt/demoapps/;
       }
       # 基于opeenresty 的处理，此处可以基于web 框架处理比如 lua-resty-route 以及lua-resty-template
       location ~* ^/demo {
           internal;
           #root /opt/demoapps/;
           content_by_lua_block {
               local cjson = require("cjson.safe")
               local args, err = ngx.req.get_uri_args()
               if err == "truncated" then
                   ngx.say(cjson.encode([[fetch error]]))
               end
               local body = {
                   args = args,
                   url = ngx.var.request_uri
               }
               ngx.say(cjson.encode(body))
           }
       }
    } 
}