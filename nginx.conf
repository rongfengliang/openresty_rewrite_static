worker_processes  1;
user root;  
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    gzip  on;
    rewrite_log on;
    real_ip_header     X-Forwarded-For;
    server {
       listen 80;
       charset utf-8;
       default_type text/html;
       location / {
            root /opt/demoapps/;
            index index.html index.htm index;
            # 不同规则的重写（比如固定的几个），注意last 与break 的区别
            rewrite ^(.*?)(.html)?\/(\d)$ /demo$3$1 last;
            # rewrite ^(.*?)(.html)?\/2$ /demo2$1 last;
       }
       error_page 404 /404.html;
       # 不存在默认界面
       location = /404.html {
            root /opt/demoapps/;
       }
       location /css1 {
            root /opt/demoapps/demo1;
       }
       location /css2 {
            root /opt/demoapps/demo2;
       }
       location =/favicon.ico {
            root /opt/demoapps/;
       }
       # 可以基于openresty 的处理，此处可以基于web 框架处理比如 lua-resty-route 以及lua-resty-template
       location ~* ^/demo {
           internal;
           root /opt/demoapps/;
        #    content_by_lua_block {
        #        local cjson = require("cjson.safe")
        #        local args, err = ngx.req.get_uri_args()
        #        if err == "truncated" then
        #            ngx.say(cjson.encode([[fetch error]]))
        #        end
        #        local body = {
        #            args = args,
        #            url = ngx.var.request_uri
        #        }
        #        ngx.say(cjson.encode(body))
        #    }
       }
    } 
    server {
       listen 8080;
       charset utf-8;
       default_type text/html;
       location / {
            root /opt/demoapps/;
            index index.html index.htm index;
            rewrite_by_lua_block {
                local uri,n,err = ngx.re.sub(ngx.var.uri, [[^(.*?)(.html)?\/(\d)$]], "/demo$3$1", "o")
                ngx.log(ngx.ERR,"fetch"..uri)
                -- local newuri = "/"
                if n >  0 then
                   newuri = uri
                   ngx.req.set_uri(newuri,true)
                end
                -- ngx.req.set_uri(newuri,true)
            }
       }
       location /css1 {
            root /opt/demoapps/demo1;
       }
       location /css2 {
            root /opt/demoapps/demo2;
       }
       location =/favicon.ico {
            root /opt/demoapps/;
       }
       error_page 404 /404.html;
       # 不存在默认界面
       location = /404.html {
            root /opt/demoapps/;
       }
       location /default/ {
            root /opt/demoapps/;
       }
       # 基于openresty 的处理，此处可以基于web 框架处理比如 lua-resty-route 以及lua-resty-template
       location ~* ^/demo {
           internal;
           index index.html index.htm index;
           root /opt/demoapps/;
        #    content_by_lua_block {
        #        local cjson = require("cjson.safe")
        #        local args, err = ngx.req.get_uri_args()
        #        if err == "truncated" then
        #            ngx.say(cjson.encode([[fetch error]]))
        #        end
        #        local body = {
        #            args = args,
        #            url = ngx.var.request_uri
        #        }
        #        ngx.say(cjson.encode(body))
        #    }
       }
    } 
}